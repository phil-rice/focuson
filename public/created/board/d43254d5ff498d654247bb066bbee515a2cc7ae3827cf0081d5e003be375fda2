"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Board = (function (_React$Component) {
    _inherits(Board, _React$Component);

    function Board(props) {
        _classCallCheck(this, Board);

        _get(Object.getPrototypeOf(Board.prototype), "constructor", this).call(this, props);
        console.log("Board.props", props);
        this.state = { squares: props.data.squares, xIsNext: true, reactRest: props.reactRest };
        console.log("creating board with", this.state);
    }

    _createClass(Board, [{
        key: "renderSquare",
        value: function renderSquare(i) {
            var _this = this;

            return this.state.reactRest.renderUsing('square', {
                index: i,
                value: this.state.squares[i],
                onClick: function onClick() {
                    return _this.handleClick(i);
                }
            });
        }
    }, {
        key: "next",
        value: function next() {
            return this.state.xIsNext ? 'X' : 'O';
        }
    }, {
        key: "handleClick",
        value: function handleClick(i) {
            var squares = this.state.squares.slice();
            squares[i] = this.next();
            this.setState({ squares: squares, xIsNext: !this.state.xIsNext });
        }
    }, {
        key: "render",
        value: function render() {
            console.log("rendering board", this.state);

            var status = 'Next player: ' + this.next();
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "status" },
                    status
                ),
                React.createElement(
                    "div",
                    { className: "board-row" },
                    this.renderSquare(0),
                    this.renderSquare(1),
                    this.renderSquare(2)
                ),
                React.createElement(
                    "div",
                    { className: "board-row" },
                    this.renderSquare(3),
                    this.renderSquare(4),
                    this.renderSquare(5)
                ),
                React.createElement(
                    "div",
                    { className: "board-row" },
                    this.renderSquare(6),
                    this.renderSquare(7),
                    this.renderSquare(8)
                )
            );
        }
    }]);

    return Board;
})(React.Component);

Board;